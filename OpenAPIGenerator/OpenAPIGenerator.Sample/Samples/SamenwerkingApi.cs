//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace OpenApiGenerator.Samples.Samples
{
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class SamenwerkingApi
	{
#pragma warning disable 8618
		private string _baseUrl;
#pragma warning restore 8618

		private System.Net.Http.HttpClient _httpClient;
		private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		public SamenwerkingApi(System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		{
			BaseUrl = "https://pkio.service.{{ www_hostname }}/overheid/samenwerken/api/behandelen/v4";
			_httpClient = httpClient;
		}

		private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
		{
			var settings = new System.Text.Json.JsonSerializerOptions();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set
			{
				_baseUrl = value;
				if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
					_baseUrl += '/';
			}
		}

		public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

		static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal de actieverzoeken van de deelnemer op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor actieverzoeken opgehaald moeten worden.</param>
		/// <param name="status">Status van het actieverzoek</param>
		/// <param name="soort">Soort actieverzoek</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<ActieverzoekList> GetActieverzoekenAsync(string? samenwerkingId = null, Status? status = null, Soort? soort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "actieverzoeken"
					urlBuilder_.Append("actieverzoeken");
					urlBuilder_.Append('?');
					if (samenwerkingId != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("samenwerkingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (status != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (soort != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("soort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(soort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ActieverzoekList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van inkomende actieverzoeken.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal het actieverzoek op.
		/// </summary>
		/// <param name="actieverzoekId">De identificatie van het actieverzoek dat opgehaald moet worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Actieverzoek> GetActieverzoekAsync(System.Guid actieverzoekId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (actieverzoekId == null)
				throw new System.ArgumentNullException("actieverzoekId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "actieverzoeken/{actieverzoekId}"
					urlBuilder_.Append("actieverzoeken/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(actieverzoekId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Actieverzoek>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het actieverzoek bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van het actieverzoek.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Wijzig de status van het actieverzoek, of (als zender) wijzig het bericht, de productId of de titel van het actieverzoek.
		/// </summary>
		/// <param name="actieverzoekId">De identificatie van het actieverzoek.</param>
		/// <returns>Actieverzoek gewijzigd.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Actieverzoek> UpdateActieverzoekAsync(System.Guid actieverzoekId, UpdateActieverzoek body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (actieverzoekId == null)
				throw new System.ArgumentNullException("actieverzoekId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PATCH");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "actieverzoeken/{actieverzoekId}"
					urlBuilder_.Append("actieverzoeken/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(actieverzoekId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Actieverzoek>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het actieverzoek bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het wijzigen van het actieverzoek.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Wijzig de documenten die horen bij het actieverzoek.
		/// </summary>
		/// <param name="actieverzoekId">De identificatie van het actieverzoek.</param>
		/// <returns>De lijst met documenten die horen bij het actieverzoek is aangepast.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Document>> UpdateActieverzoekDocumentsAsync(System.Guid actieverzoekId, UpdateActieverzoekDocumenten body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (actieverzoekId == null)
				throw new System.ArgumentNullException("actieverzoekId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "actieverzoeken/{actieverzoekId}/documenten"
					urlBuilder_.Append("actieverzoeken/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(actieverzoekId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/documenten");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Document>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het actieverzoek bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het wijzigen van documentenlijst die horen bij het actieverzoek.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Vraag health-status over de API op.
		/// </summary>
		/// <returns>Health-status over de API.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<AppHealth> GetAppHealthAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "app-health"
					urlBuilder_.Append("app-health");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<AppHealth>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Vraag metadata over de API op.
		/// </summary>
		/// <returns>Detailinformatie over de API.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<API> GetAppInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "app-info"
					urlBuilder_.Append("app-info");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<API>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Verwijder een document uit de samenwerking.
		/// </summary>
		/// <param name="documentId">De identificatie van het document dat verwijderd wordt.</param>
		/// <returns>Document verwijderd.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteDocumentAsync(System.Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (documentId == null)
				throw new System.ArgumentNullException("documentId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "documenten/{documentId}"
					urlBuilder_.Append("documenten/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 204)
						{
							return;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Gebruiker heeft geen rechten voor deze operatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is gesloten of deze wordt ge\u00efnitialiseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem bij het verwijderen van het document.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal de metadata van het document op.
		/// </summary>
		/// <param name="documentId">De identificatie van het document.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Document> GetDocumentMetadataAsync(System.Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (documentId == null)
				throw new System.ArgumentNullException("documentId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "documenten/{documentId}"
					urlBuilder_.Append("documenten/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van het document.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Wijzig de metadata van het document.
		/// </summary>
		/// <param name="documentId">De identificatie van het document.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Document> PatchDocumentMetadataAsync(System.Guid documentId, UpdateDocument body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (documentId == null)
				throw new System.ArgumentNullException("documentId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PATCH");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "documenten/{documentId}"
					urlBuilder_.Append("documenten/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document is niet gevonden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is gesloten of deze wordt ge\u00efnitialiseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 415)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Niet toegestaan mediatype.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem bij het wijzigen van het document.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Download het document.
		/// </summary>
		/// <param name="documentId">De identificatie van het document.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<FileResponse> GetDocumentContentAsync(System.Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (documentId == null)
				throw new System.ArgumentNullException("documentId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "documenten/{documentId}/content"
					urlBuilder_.Append("documenten/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/content");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200 || status_ == 206)
						{
							var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
							var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
							disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
							return fileResponse_;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van het document.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Wijzig het document.
		/// </summary>
		/// <param name="documentId">De identificatie van het document.</param>
		/// <param name="file">Het document dat opgeslagen moet worden.
		/// <br/>De bestandsnaam:
		/// <br/>- mag niet langer zijn dan 256 tekens
		/// <br/>- moet een extentie hebben
		/// <br/>- mag niet beginnen met een punt
		/// <br/>- mag geen meerdere punten achter elkaar bevatten
		/// <br/>- mag niet bestaan uit uitsluitend spaties</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<System.Guid> ReplaceDocumentFileAsync(System.Guid documentId, FileParameter file = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (documentId == null)
				throw new System.ArgumentNullException("documentId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var boundary_ = System.Guid.NewGuid().ToString();
					var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
					content_.Headers.Remove("Content-Type");
					content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

					if (file == null)
						throw new System.ArgumentNullException("file");
					else
					{
						var content_file_ = new System.Net.Http.StreamContent(file.Data);
						if (!string.IsNullOrEmpty(file.ContentType))
							content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
						content_.Add(content_file_, "file", file.FileName ?? "file");
					}
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "documenten/{documentId}/content"
					urlBuilder_.Append("documenten/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/content");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is gesloten of deze wordt ge\u00efnitialiseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 413)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document is te groot.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 415)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Niet toegestaan mediatype.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 422)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document bevat een virus.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem bij het vervangen van het document.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal alle notificaties van de deelnemer op.
		/// </summary>
		/// <param name="_sort">Deze query-parameter accepteert een lijst van velden waarop gesorteerd moet worden gescheiden door een komma. Door een minteken (“-”) voor de veldnaam te zetten, wordt het veld in aflopende volgorde gesorteerd.
		/// <br/>De volgende velden worden ondersteund:
		/// <br/>- eventDatumTijd
		/// <br/>- samenwerkingId
		/// <br/>- eventInitiator
		/// <br/>
		/// <br/>Een aantal voorbeelden: &lt;pre&gt; _sort=eventDatumTijd
		/// <br/> _sort=samenwerkingId,-eventDatumTijd
		/// <br/> _sort=-eventInitiator,-samenwerkingId,eventDatumTijd
		/// <br/> &lt;/pre&gt; Als geen sortering wordt opgegeven, worden de resultaten aflopend op eventDatumTijd gesorteerd.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<NotificatieList> GetAllNotificatiesAsync(object? _sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "notificaties"
					urlBuilder_.Append("notificaties");
					urlBuilder_.Append('?');
					if (_sort != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("_sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_sort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<NotificatieList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van de notificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Verwijder de notificatie.
		/// </summary>
		/// <param name="notificatieId">De identificatie van een notificatie.</param>
		/// <returns>Notificatie verwijderd.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteNotificatieAsync(System.Guid notificatieId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (notificatieId == null)
				throw new System.ArgumentNullException("notificatieId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "notificaties/{notificatieId}"
					urlBuilder_.Append("notificaties/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(notificatieId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 204)
						{
							return;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Gebruiker heeft geen rechten voor deze operatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De notificatie bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het verwijderen van de notificatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal de notificatie op.
		/// </summary>
		/// <param name="notificatieId">De identificatie van de notificatie die opgehaald moet worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Notificatie> GetNotificatieAsync(System.Guid notificatieId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (notificatieId == null)
				throw new System.ArgumentNullException("notificatieId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "notificaties/{notificatieId}"
					urlBuilder_.Append("notificaties/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(notificatieId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Notificatie>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De notificatie bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van de notificatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal een lijst van organisaties op die voldoen aan de opgegeven criteria.
		/// </summary>
		/// <param name="_find">Zoekterm</param>
		/// <param name="aantal">Max aantal organisaties per pagina. Als de parameter niet meegegeven wordt zal de standaardwaarde 10 gebruikt worden.</param>
		/// <param name="pagina">Deze parameter wordt gebruikt om de betreffende pagina op te halen. De geldige waarden zijn 1 en waarden hoger dan 1. Standaard zal de eerste pagina opgehaald worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<OrganisatieList> GetOrganisatiesAsync(string? _find = null, int? aantal = null, int? pagina = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "organisaties"
					urlBuilder_.Append("organisaties");
					urlBuilder_.Append('?');
					if (_find != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("_find")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_find, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (aantal != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("aantal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(aantal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (pagina != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("pagina")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pagina, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<OrganisatieList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van organisaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal een overzicht van de samenwerkingen op.
		/// </summary>
		/// <param name="aantal">Max aantal samenwerkingen per pagina. Als de parameter niet meegegeven wordt zal de standaardwaarde 100 gebruikt worden.</param>
		/// <param name="pagina">Deze parameter wordt gebruikt om de betreffende pagina op te halen. De geldige waarden zijn 1 en waarden hoger dan 1. Standaard zal de eerste pagina opgehaald worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<SamenwerkingenPagedModel> GetSamenwerkingenAsync(int? aantal = null, int? pagina = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen"
					urlBuilder_.Append("samenwerkingen");
					urlBuilder_.Append('?');
					if (aantal != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("aantal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(aantal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (pagina != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("pagina")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pagina, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<SamenwerkingenPagedModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van de samenwerkingen.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Maak een nieuwe samenwerking aan.
		/// </summary>
		/// <returns>De samenwerking is aangemaakt.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Samenwerking> CreateSamenwerkingAsync(CreateSamenwerking body, string? x_Stam_Versie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{

					if (x_Stam_Versie != null)
						request_.Headers.TryAddWithoutValidation("X-Stam-Versie", ConvertToString(x_Stam_Versie, System.Globalization.CultureInfo.InvariantCulture));
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen"
					urlBuilder_.Append("samenwerkingen");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 201)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Samenwerking>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen rechten op het verzoek.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het gevraagde verzoek bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het opslaan van de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Verwijder de samenwerking.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking die verwijderd moet worden.</param>
		/// <returns>De samenwerking is verwijderd.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteSamenwerkingAsync(string samenwerkingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 204)
						{
							return;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Gebruiker is niet de initiator van de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is niet gesloten.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het verwijderen van de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal de gegevens van de samenwerking op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking die opgehaald moet worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Samenwerking> GetSamenwerkingAsync(string samenwerkingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Samenwerking>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Wijzig de gegevens van de samenwerking.
		/// </summary>
		/// <remarks>
		/// De patch kan gebruikt worden om de samenwerking te sluiten (status wordt opgegeven met de waarde GESLOTEN) of om één of meer velden van de samenwerking te wijzigen (status wordt in dit geval niet opgegeven).
		/// <br/>
		/// <br/>Bij het wijzigen van de samenwerking gelden verschillende regels, afhankelijk van welke velden gewijzigd worden.
		/// <br/>
		/// <br/>Voor elke wijziging gelden in elk geval de volgende twee eisen:
		/// <br/>* De samenwerking heeft de status OPEN.
		/// <br/>* De patch wordt uitgevoerd door de initiator van de samenwerking.
		/// <br/>
		/// <br/>Voor het wijzigen van de &lt;b&gt;status&lt;/b&gt; geldt:
		/// <br/>* De enige toegestane waarde is GESLOTEN.
		/// <br/>* Eventuele overige opgegeven velden worden genegeerd.
		/// <br/>* De samenwerking wordt gesloten.
		/// <br/>
		/// <br/>Voor het wijzigen van de &lt;b&gt;eindDatumTijd&lt;/b&gt; geldt:
		/// <br/>
		/// <br/>* De samenwerking verloopt binnen 30 dagen.
		/// <br/>* De opgegeven eindDatumTijd ligt na de huidige eindDatumTijd.
		/// <br/>* De opgegeven eindDatumTijd ligt voor de huidige eindDatumTijd + 365 dagen.
		/// <br/>
		/// <br/>Voor het wijzigen van &lt;b&gt;bronVerzoek&lt;/b&gt;, &lt;b&gt;oloVerzoeknummer&lt;/b&gt; of &lt;b&gt;verzoeknummer&lt;/b&gt; geldt:
		/// <br/>* Geen van deze velden heeft een waarde in de huidige samenwerking.
		/// <br/>* Het is niet toegestaan zowel oloVerzoeknummer als verzoeknummer op te geven.
		/// <br/>* bronVerzoek mag optioneel opgegeven worden. Als het opgegeven is, moet het overeenkomen met het opgegeven verzoeknummer.
		/// <br/>Als het niet opgegeven is, en er is wel een (olo)verzoeknummer opgegeven, dan wordt de waarde hieruit afgeleid.
		/// </remarks>
		/// <param name="samenwerkingId">De identificatie van de samenwerking die aangepast moet worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Samenwerking> PatchSamenwerkingAsync(string samenwerkingId, UpdateSamenwerking body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PATCH");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Samenwerking>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Gebruiker is niet de initiator van de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is niet open, of deze wordt nog ge\u00efnitialiseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 422)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het is niet toegestaan een of meerdere van deze velden te wijzigen.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het wijzigen van de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Maak een actieverzoek aan.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor actieverzoek aangemaakt moet worden.</param>
		/// <returns>Actieverzoek aangemaakt.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Actieverzoek> CreateActieverzoekAsync(string samenwerkingId, CreateActieverzoek body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/actieverzoeken"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/actieverzoeken");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 201)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Actieverzoek>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het aanmaken van het actieverzoek.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal het overzicht van ontvangen actieverzoeken op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor actieverzoeken opgehaald moeten worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<ActieverzoekList> GetInkomendeActieverzoekenAsync(string samenwerkingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/actieverzoeken/inkomend"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/actieverzoeken/inkomend");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ActieverzoekList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van inkomende actieverzoeken.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal het overzicht van verzonden actieverzoeken op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor actieverzoeken opgehaald moeten worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<ActieverzoekList> GetUitgaandeActieverzoekenAsync(string samenwerkingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/actieverzoeken/uitgaand"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/actieverzoeken/uitgaand");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ActieverzoekList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van uitgaande actieverzoeken.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal een overzicht van deelnemers aan de samenwerking op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor deelnemers opgehaald worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<DeelnemerList> GetDeelnemersAsync(string samenwerkingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/deelnemers"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/deelnemers");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<DeelnemerList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van deelnemers voor de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Voeg een deelnemer toe aan de samenwerking.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor de gebruiker geautoriseerd wordt.</param>
		/// <returns>Ketenpartner toegevoegd.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Deelnemer> AddKetenpartnerAsync(string samenwerkingId, CreateKetenpartner body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/deelnemers"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/deelnemers");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 201)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Deelnemer>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is gesloten of deze wordt ge\u00efnitialiseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het toevoegen van de ketenpartner.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Verwijder een deelnemer uit de samenwerking.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waar de ketenpartner van verwijderd moet worden.</param>
		/// <param name="organisatieId">De organisatieId van de te verwijderen ketenpartner.</param>
		/// <returns>Ketenpartner verwijderd.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task DeleteKetenpartnerAsync(string samenwerkingId, string organisatieId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			if (organisatieId == null)
				throw new System.ArgumentNullException("organisatieId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/deelnemers/{organisatieId}"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/deelnemers/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisatieId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 204)
						{
							return;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Gebruiker heeft geen rechten voor deze operatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer) of de ketenpartner is niet (meer) geautoriseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is gesloten, de gebruiker probeert de initiator te verwijderen, of er zijn nog openstaande actieverzoeken voor de ketenpartner.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het verwijderen van de ketenpartner.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal de gegevens van de deelnemer op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor een deelnemer opgehaald wordt.</param>
		/// <param name="organisatieId">De organisatieId van de deelnemer die opgehaald wordt.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Deelnemer> GetDeelnemerVoorIdAsync(string samenwerkingId, string organisatieId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			if (organisatieId == null)
				throw new System.ArgumentNullException("organisatieId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/deelnemers/{organisatieId}"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/deelnemers/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisatieId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Deelnemer>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Gebruiker heeft geen rechten voor deze operatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van de deelnemer voor de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Wijzig het privilege van de deelnemer binnen de samenwerking.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor het privilege van een ketenpartner aangepast wordt.</param>
		/// <param name="organisatieId">De organisatieId van de ketenpartner voor wie het privilege aangepast wordt.</param>
		/// <returns>Samenwerkingautorisatie aangepast.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Deelnemer> UpdatePrivilegeVoorKetenpartnerAsync(string samenwerkingId, string organisatieId, UpdateAutorisatie body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			if (organisatieId == null)
				throw new System.ArgumentNullException("organisatieId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/deelnemers/{organisatieId}"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/deelnemers/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisatieId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Deelnemer>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer) of de ketenpartner is niet geautoriseerd voor de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is gesloten of deze wordt ge\u00efnitialiseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het wijzigen van de samenwerkingautorisatie voor de ketenpartner.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal een overzicht van documenten in de samenwerking op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van een samenwerking.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<DocumentList> GetDocumentenAsync(string samenwerkingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/documenten"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/documenten");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<DocumentList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van de documenten van de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Voeg een document toe aan de samenwerking.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor het document geupload moet worden.</param>
		/// <param name="documentOmschrijving">Een tekstuele beschrijving van het document.</param>
		/// <param name="nummerBinnenSysteem">Het identificerend nummer binnen een extern systeem.</param>
		/// <param name="kenmerkSysteem">Het kenmerk van een extern systeem.</param>
		/// <param name="vertrouwelijkheidsAanduiding">De vertrouwelijkheidsaanduiding van het document.</param>
		/// <param name="taal">De taal waarin het document is opgesteld.</param>
		/// <param name="file">Het document dat opgeslagen moet worden.
		/// <br/>De bestandsnaam:
		/// <br/>- mag niet langer zijn dan 256 tekens
		/// <br/>- moet een extentie hebben
		/// <br/>- mag niet beginnen met een punt
		/// <br/>- mag geen meerdere punten achter elkaar bevatten
		/// <br/>- mag niet bestaan uit uitsluitend spaties</param>
		/// <returns>Het document is met succes opgeslagen.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<Document> AddNewDocumentAsync(string samenwerkingId, string? documentOmschrijving = null, string? nummerBinnenSysteem = null, string? kenmerkSysteem = null, VertrouwelijkheidsAanduiding? vertrouwelijkheidsAanduiding = null, string? taal = null, FileParameter file = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var boundary_ = System.Guid.NewGuid().ToString();
					var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
					content_.Headers.Remove("Content-Type");
					content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

					if (file == null)
						throw new System.ArgumentNullException("file");
					else
					{
						var content_file_ = new System.Net.Http.StreamContent(file.Data);
						if (!string.IsNullOrEmpty(file.ContentType))
							content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
						content_.Add(content_file_, "file", file.FileName ?? "file");
					}
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/documenten"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/documenten");
					urlBuilder_.Append('?');
					if (documentOmschrijving != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("documentOmschrijving")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(documentOmschrijving, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (nummerBinnenSysteem != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("nummerBinnenSysteem")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nummerBinnenSysteem, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (kenmerkSysteem != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("kenmerkSysteem")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kenmerkSysteem, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (vertrouwelijkheidsAanduiding != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("vertrouwelijkheidsAanduiding")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(vertrouwelijkheidsAanduiding, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					if (taal != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("taal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(taal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 201)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is gesloten of deze wordt ge\u00efnitialiseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 413)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document is te groot.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 415)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Niet toegestaan mediatype.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 422)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document bevat een virus.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het uploaden van het document.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal zip-bestand met alle toegankelijke documenten in de samenwerking op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van een samenwerking.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<FileResponse> GetDocumentenAsZipAsync(string samenwerkingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/documenten/content"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/documenten/content");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200 || status_ == 206)
						{
							var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
							var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
							disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
							return fileResponse_;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van het zipbestand met documenten van de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal de documentautorisaties van de deelnemers op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor autorisaties opgehaald moeten worden.</param>
		/// <param name="documentId">De identificatie van het document waarvoor autorisaties opgehaald moeten worden.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<DocumentAutorisatieList> GetAutorisatiesVoorDocumentAsync(string samenwerkingId, System.Guid documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			if (documentId == null)
				throw new System.ArgumentNullException("documentId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/documenten/{documentId}/autorisaties"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/documenten/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/autorisaties");

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<DocumentAutorisatieList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De gebruiker heeft geen toegang tot deze samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Het document bestaat niet (binnen de samenwerking), of de samenwerking bestaat niet.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van de autorisatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Wijzig een documentautorisatie van de deelnemer.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor de autorisatie aangepast wordt.</param>
		/// <param name="documentId">De identificatie van het document waarvoor de autorisatie aangepast wordt.</param>
		/// <param name="organisatieId">De organisatieId van de instantie waarvoor de autorisatie aangepast wordt</param>
		/// <returns>Samenwerkingautorisatie aangepast.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<DocumentAutorisatie> UpdateDocumentAutorisatieVoorKetenpartnerAsync(string samenwerkingId, System.Guid documentId, string organisatieId, UpdateDocumentAutorisatie body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			if (documentId == null)
				throw new System.ArgumentNullException("documentId");

			if (organisatieId == null)
				throw new System.ArgumentNullException("organisatieId");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
					var content_ = new System.Net.Http.ByteArrayContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/documenten/{documentId}/autorisaties/{organisatieId}"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/documenten/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documentId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/autorisaties/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(organisatieId, System.Globalization.CultureInfo.InvariantCulture)));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<DocumentAutorisatie>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De service is aangeroepen met invalide data. De opgegeven data voldoet niet aan de specificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 403)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Gebruiker heeft geen rechten voor deze operatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer) of het document is geen bestaand document in de samenwerking.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 409)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking is gesloten of deze wordt ge\u00efnitialiseerd.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het wijzigen van de autorisatie.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Haal de bij de samenwerking horende notificaties van de deelnemer op.
		/// </summary>
		/// <param name="samenwerkingId">De identificatie van de samenwerking waarvoor notificaties opgehaald moeten worden.</param>
		/// <param name="_sort">Deze query-parameter accepteert een lijst van velden waarop gesorteerd moet worden gescheiden door een komma. Door een minteken (“-”) voor de veldnaam te zetten, wordt het veld in aflopende volgorde gesorteerd.
		/// <br/>De volgende velden worden ondersteund:
		/// <br/>- eventDatumTijd
		/// <br/>- samenwerkingId
		/// <br/>- eventInitiator
		/// <br/>
		/// <br/>Een aantal voorbeelden: &lt;pre&gt; _sort=eventDatumTijd
		/// <br/> _sort=samenwerkingId,-eventDatumTijd
		/// <br/> _sort=-eventInitiator,-samenwerkingId,eventDatumTijd
		/// <br/> &lt;/pre&gt; Als geen sortering wordt opgegeven, worden de resultaten aflopend op eventDatumTijd gesorteerd.</param>
		/// <returns>Succes.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<NotificatieList> GetNotificatiesSamenwerkingAsync(string samenwerkingId, object? _sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (samenwerkingId == null)
				throw new System.ArgumentNullException("samenwerkingId");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "samenwerkingen/{samenwerkingId}/notificaties"
					urlBuilder_.Append("samenwerkingen/");
					urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(samenwerkingId, System.Globalization.CultureInfo.InvariantCulture)));
					urlBuilder_.Append("/notificaties");
					urlBuilder_.Append('?');
					if (_sort != null)
					{
						urlBuilder_.Append(System.Uri.EscapeDataString("_sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_sort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					}
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<NotificatieList>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Authenticatiegegevens ontbreken of zijn onjuist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("De samenwerking bestaat niet (meer).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<ErrorResponse>("Er is een probleem opgetreden bij het ophalen van de notificaties.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T)!, string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody!, responseText);
				}
				catch (System.Text.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					{
						var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
						return new ObjectResponseResult<T>(typedBody!, string.Empty);
					}
				}
				catch (System.Text.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null)
			{
				return "";
			}

			if (value is System.Enum)
			{
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
								as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value is string[])
			{
				return string.Join(",", (string[])value);
			}
			else if (value.GetType().IsArray)
			{
				var valueArray = (System.Array)value;
				var valueTextArray = new string[valueArray.Length];
				for (var i = 0; i < valueArray.Length; i++)
				{
					valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
				}
				return string.Join(",", valueTextArray);
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	/// <summary>
	/// levert metadata over de API.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record API
	{

		[System.Text.Json.Serialization.JsonPropertyName("app-info")]
		public AppInfo AppInfo { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Alle beschikbare data over een actieverzoek.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record Actieverzoek
	{

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		/// <summary>
		/// De identificatie van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("actieverzoekId")]
		public System.Guid ActieverzoekId { get; set; } = default!;

		/// <summary>
		/// Het bericht aan de ontvanger van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("bericht")]
		[System.ComponentModel.DataAnnotations.StringLength(6144, MinimumLength = 1)]
		public string Bericht { get; set; } = default!;

		/// <summary>
		/// De (Nederlandse) datum en tijd van het aanmaken van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("creatieDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string CreatieDatumTijd { get; set; } = default!;

		/// <summary>
		/// Documenten uit de samenwerking die gekoppeld zijn aan het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documenten")]
		public System.Collections.Generic.ICollection<Document> Documenten { get; set; } = default!;

		/// <summary>
		/// De melding m.b.t. gereed melden / intrekken actieverzoek. Bij het aanmaken van een actieverzoek zal dit veld initieel altijd leeg zijn.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("melding")]
		[System.ComponentModel.DataAnnotations.StringLength(6144, MinimumLength = 1)]
		public string Melding { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de ontvanger van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("ontvanger")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string Ontvanger { get; set; } = default!;

		/// <summary>
		/// De naam van de ontvanger van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("ontvangerNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string OntvangerNaam { get; set; } = default!;

		/// <summary>
		/// De productId van het actieverzoek
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("productId")]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string ProductId { get; set; } = default!;

		/// <summary>
		/// De identificatie van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkingId")]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 5)]
		public string SamenwerkingId { get; set; } = default!;

		/// <summary>
		/// De status van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("status")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public ActieverzoekStatus Status { get; set; } = default!;

		/// <summary>
		/// De titel van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("titel")]
		[System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 1)]
		public string Titel { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de initiator van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("zender")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string Zender { get; set; } = default!;

		/// <summary>
		/// De naam van de initiator van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("zenderNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string ZenderNaam { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Een lijst actieverzoeken.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record ActieverzoekList
	{

		[System.Text.Json.Serialization.JsonPropertyName("_embedded")]
		public _embedded _embedded { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Details benodigd voor het aanmaken van het actieverzoek.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record CreateActieverzoek
	{
		/// <summary>
		/// De omschrijving van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("bericht")]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(6144)]
		public string Bericht { get; set; } = default!;

		/// <summary>
		/// Een lijst van identifiers van relevante documenten in het samenwerkdossier.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documenten")]
		public System.Collections.Generic.ICollection<System.Guid> Documenten { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de ontvanger van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("ontvanger")]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string Ontvanger { get; set; } = default!;

		/// <summary>
		/// De productId van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("productId")]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string ProductId { get; set; } = default!;

		/// <summary>
		/// De titel van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("titel")]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string Titel { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Autorisatiedata voor de samenwerking.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record CreateKetenpartner
	{

		[System.Text.Json.Serialization.JsonPropertyName("organisatie")]
		[System.ComponentModel.DataAnnotations.Required]
		public OrganisatieId Organisatie { get; set; } = new OrganisatieId();

		/// <summary>
		/// * VT - Volledige toegang, toegang tot alle documenten in het samenwerkdossier. 
		/// <br/>* BT - Beperkte toegang, toegang tot documenten in het samenwerkdossier die geen persoonsgegevens en/of bedrijfsgevoelige gegevens bevatten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("privilege")]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public CreateKetenpartnerPrivilege Privilege { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// De samenwerking die opgeslagen moet worden.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record CreateSamenwerking
	{
		/// <summary>
		/// Beschrijving van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("beschrijving")]
		[System.ComponentModel.DataAnnotations.StringLength(6144)]
		public string Beschrijving { get; set; } = default!;

		/// <summary>
		/// Bron van het verzoek: DSO_LV of OLO. Als bij het aanmaken van een samenwerking op basis van een verzoek 1 verzoeknummer is ingevuld, kan de bron daaruit worden afgeleid en mag bronVerzoek leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("bronVerzoek")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public CreateSamenwerkingBronVerzoek BronVerzoek { get; set; } = default!;

		/// <summary>
		/// Het e-mailadres van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonEmailadres")]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ContactpersoonEmailadres { get; set; } = default!;

		/// <summary>
		/// De naam van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string ContactpersoonNaam { get; set; } = default!;

		/// <summary>
		/// Het telefoonnummer van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonTelefoonnummer")]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string ContactpersoonTelefoonnummer { get; set; } = default!;

		/// <summary>
		/// Globale locatie van het verzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("globaleLocatie")]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string GlobaleLocatie { get; set; } = default!;

		/// <summary>
		/// Het kenmerk van een extern systeem.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("kenmerkSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string KenmerkSysteem { get; set; } = default!;

		/// <summary>
		/// Het nummer van de samenwerking binnen de ketenpartner van de initiator.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("nummerBinnenSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string NummerBinnenSysteem { get; set; } = default!;

		/// <summary>
		/// Het nummer van het OLO-verzoek. Kan niet worden gebruikt i.c.m. DSO-verzoeknummer. Als het ingevuld is, moet bronVerzoek OLO zijn of leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("oloVerzoeknummer")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"(?=^\d{7}$)\d*[1-9]")]
		public string OloVerzoeknummer { get; set; } = default!;

		/// <summary>
		/// Het doel van de samenwerking, de default waarde is 'Behandelen'.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkDoel")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public CreateSamenwerkingSamenwerkDoel SamenwerkDoel { get; set; } = default!;

		/// <summary>
		/// De naam van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("titel")]
		[System.ComponentModel.DataAnnotations.Required]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string Titel { get; set; } = default!;

		/// <summary>
		/// Het type van het verzoek. Bij een DSO-verzoek is de waarde leeg of één van de volgende waarden:
		/// <br/>* 'Aanvraag vergunning' (de default)
		/// <br/>* 'Melding'
		/// <br/>* 'Informatie'
		/// <br/>* 'Informatie ongewoon voorval'
		/// <br/>* 'Aanvraag maatwerkvoorschrift'
		/// <br/>* 'Melding gelijkwaardige maatregel'
		/// <br/>* 'Aanvraag toestemming gelijkwaardige maatregel'
		/// <br/>
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("typeVerzoek")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string TypeVerzoek { get; set; } = default!;

		/// <summary>
		/// Verzoeknummer van de samenwerking. Kan niet worden gebruikt i.c.m. OLO-verzoeknummer. Als het ingevuld is, moet bronVerzoek DSO_LV zijn of leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("verzoeknummer")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{13}")]
		public string Verzoeknummer { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Een deelnemer en diens privilege binnen een samenwerking.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record Deelnemer
	{

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("organisatie")]
		public KetenpartnerDetails Organisatie { get; set; } = default!;

		/// <summary>
		/// * VT - Volledige toegang, toegang tot alle documenten in het samenwerkdossier. 
		/// <br/>* BT - Beperkte toegang, toegang tot documenten in het samenwerkdossier die geen persoonsgegevens en/of bedrijfsgevoelige gegevens bevatten.
		/// <br/> * INITIATOR - Volledige toegang en rechten om het dossier en alle documenten te wijzigen of te verwijderen.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("privilege")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public DeelnemerPrivilege Privilege { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Een lijst deelnemers.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record DeelnemerList
	{

		[System.Text.Json.Serialization.JsonPropertyName("_embedded")]
		public _embedded2 _embedded { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Alle beschikbare metadata van een document
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record Document
	{

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de gebruiker die het document toegevoegd heeft.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("aangemaaktDoor")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string AangemaaktDoor { get; set; } = default!;

		/// <summary>
		/// De naam van de gebruiker die het document toegevoegd heeft.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("aangemaaktDoorNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string AangemaaktDoorNaam { get; set; } = default!;

		/// <summary>
		/// De bestandsnaam van het document.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("bestandsNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
		public string BestandsNaam { get; set; } = default!;

		/// <summary>
		/// De datum en tijd waarop het document is toegevoegd.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("creatieDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string CreatieDatumTijd { get; set; } = default!;

		/// <summary>
		/// De documenthash.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documentHash")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string DocumentHash { get; set; } = default!;

		/// <summary>
		/// De identificatie van het document.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documentId")]
		public System.Guid DocumentId { get; set; } = default!;

		/// <summary>
		/// Een tekstuele beschrijving van het document.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documentOmschrijving")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string DocumentOmschrijving { get; set; } = default!;

		/// <summary>
		/// Het MIME type van het document.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("formaat")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string Formaat { get; set; } = default!;

		/// <summary>
		/// Het kenmerk van een extern systeem.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("kenmerkSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string KenmerkSysteem { get; set; } = default!;

		/// <summary>
		/// De datum en tijd waarop het document voor het laatst is aangepast.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("laatstAangepastDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string LaatstAangepastDatumTijd { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de gebruiker die het document voor het laatst heeft aangepast.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("laatstAangepastDoor")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string LaatstAangepastDoor { get; set; } = default!;

		/// <summary>
		/// De naam van de gebruiker die het document voor het laatst heeft aangepast.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("laatstAangepastDoorNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string LaatstAangepastDoorNaam { get; set; } = default!;

		/// <summary>
		/// Het identificerend nummer binnen een extern systeem.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("nummerBinnenSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string NummerBinnenSysteem { get; set; } = default!;

		/// <summary>
		/// De identificatie van een samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkingId")]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 5)]
		public string SamenwerkingId { get; set; } = default!;

		/// <summary>
		/// De taal waarin het document is opgesteld.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("taal")]
		[System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 1)]
		public string Taal { get; set; } = default!;

		/// <summary>
		/// De vertrouwelijkheidsaanduiding van het document.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("vertrouwelijkheidsAanduiding")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public DocumentVertrouwelijkheidsAanduiding VertrouwelijkheidsAanduiding { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// De rechten die een ketenpartner heeft op een bepaald document.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record DocumentAutorisatie
	{

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("organisatie")]
		public KetenpartnerDetails Organisatie { get; set; } = default!;

		/// <summary>
		/// * N - geen rechten 
		/// <br/> * R - leesrechten 
		/// <br/> * RUD - lees- en wijzigrechten
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("rechten")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public DocumentAutorisatieRechten Rechten { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// De lijst met autorisaties van een document.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record DocumentAutorisatieList
	{

		[System.Text.Json.Serialization.JsonPropertyName("_embedded")]
		public _embedded3 _embedded { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Een lijst met documenten.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record DocumentList
	{

		[System.Text.Json.Serialization.JsonPropertyName("_embedded")]
		public _embedded4 _embedded { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Details waarom een request niet met succes uitgevoerd kan worden.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record ErrorResponse
	{
		/// <summary>
		/// Meer details over de foutsituatie, indien van toepassing
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("detail")]
		public string Detail { get; set; } = default!;

		/// <summary>
		/// Een unieke identificatie die hoort bij het specifieke voorkomen van de fout.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("instance")]
		public string Instance { get; set; } = default!;

		/// <summary>
		/// Validatiefouten gespecificeerd per veld
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("invalid-params")]
		public System.Collections.Generic.ICollection<InvalidParam> InvalidParams { get; set; } = default!;

		/// <summary>
		/// De Http Response code.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("status")]
		public int Status { get; set; } = default!;

		/// <summary>
		/// Een korte leesbare melding die aangeeft wat er niet gelukt is
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("title")]
		public string Title { get; set; } = default!;

		/// <summary>
		/// URI van het type van de fout
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("type")]
		public string Type { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Validatiefouten gespecificeerd per veld
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record InvalidParam
	{
		/// <summary>
		/// De naam van het veld of parameter waarvan de waarde niet geaccepteerd is
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("name")]
		public string Name { get; set; } = default!;

		/// <summary>
		/// De reden dat het niet geaccepteerd is
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("reason")]
		public string Reason { get; set; } = default!;

		/// <summary>
		/// URI van het type van de fout
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("type")]
		public string Type { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Details van een ketenpartner.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record KetenpartnerDetails
	{
		/// <summary>
		/// De identificatie van een ketenpartner (OIN of HRN)
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("id")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string Id { get; set; } = default!;

		/// <summary>
		/// De naam van de ketenpartner.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("naam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string Naam { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record Link
	{

		[System.Text.Json.Serialization.JsonPropertyName("deprecation")]
		public string Deprecation { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("href")]
		public string Href { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("hreflang")]
		public string Hreflang { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("name")]
		public string Name { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("profile")]
		public string Profile { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("templated")]
		public bool Templated { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("title")]
		public string Title { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("type")]
		public string Type { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Links : System.Collections.Generic.Dictionary<string, Link>
	{

	}

	/// <summary>
	/// Een notificatie over een samenwerkingsgebeurtenis
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record Notificatie
	{

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de gebruiker die deze notificatie ontvangt.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("deelnemer")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string Deelnemer { get; set; } = default!;

		/// <summary>
		/// De naam van de gebruiker die deze notificatie ontvangt.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("deelnemerNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string DeelnemerNaam { get; set; } = default!;

		/// <summary>
		/// De (Nederlandse) datum en tijd van de gebeurtenis waar de notificatie over gaat.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("eventDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string EventDatumTijd { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de gebruiker die een actie heeft uitgevoerd met deze notificatie tot gevolg.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("eventInitiator")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string EventInitiator { get; set; } = default!;

		/// <summary>
		/// De naam van de gebruiker die een actie heeft uitgevoerd met deze notificatie tot gevolg.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("eventInitiatorNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string EventInitiatorNaam { get; set; } = default!;

		/// <summary>
		/// De identificatie van de notificatie
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("notificatieId")]
		public System.Guid NotificatieId { get; set; } = default!;

		/// <summary>
		/// De detailtekst van de notificatie.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("notificatieTekst")]
		[System.ComponentModel.DataAnnotations.StringLength(6144, MinimumLength = 1)]
		public string NotificatieTekst { get; set; } = default!;

		/// <summary>
		/// De titel van de notificatie.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("notificatieTitel")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string NotificatieTitel { get; set; } = default!;

		/// <summary>
		/// Het type notificatie.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("notificatieType")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public NotificatieType NotificatieType { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("properties")]
		public Properties Properties { get; set; } = default!;

		/// <summary>
		/// De identificatie van de samenwerking waar deze notificatie betrekking op heeft.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkingId")]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 5)]
		public string SamenwerkingId { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Een lijst notificaties.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record NotificatieList
	{

		[System.Text.Json.Serialization.JsonPropertyName("_embedded")]
		public _embedded5 _embedded { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Gebruikt bij het zoeken naar organisaties.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record Organisatie
	{

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		/// <summary>
		/// De identificatie van een organisatie (OIN of HRN)
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("id")]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string Id { get; set; } = default!;

		/// <summary>
		/// De naam van een organisatie
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("naam")]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Naam { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Gebruikt bij het aanmaken van autorisaties.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record OrganisatieId
	{
		/// <summary>
		/// De identificatie van een organisatie (OIN of HRN)
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("id")]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string Id { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Een gepagineerde lijst organisaties.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record OrganisatieList
	{

		[System.Text.Json.Serialization.JsonPropertyName("_embedded")]
		public _embedded6 _embedded { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("page")]
		public PageMetadata Page { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record PageMetadata
	{

		[System.Text.Json.Serialization.JsonPropertyName("number")]
		public long Number { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("size")]
		public long Size { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("totalElements")]
		public long TotalElements { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("totalPages")]
		public long TotalPages { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Een samenwerking met alle beschikbare metadata (zonder onderliggende objecten)
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record Samenwerking
	{

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("aangemaaktDoor")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string AangemaaktDoor { get; set; } = default!;

		/// <summary>
		/// De naam van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("aangemaaktDoorNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string AangemaaktDoorNaam { get; set; } = default!;

		/// <summary>
		/// Beschrijving van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("beschrijving")]
		[System.ComponentModel.DataAnnotations.StringLength(6144, MinimumLength = 1)]
		public string Beschrijving { get; set; } = default!;

		/// <summary>
		/// Bron van het verzoek: DSO_LV of OLO. Als bij het aanmaken van een samenwerking op basis van een verzoek 1 verzoeknummer is ingevuld, kan de bron daaruit worden afgeleid en mag bronVerzoek leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("bronVerzoek")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public SamenwerkingBronVerzoek BronVerzoek { get; set; } = default!;

		/// <summary>
		/// Het e-mailadres van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonEmailadres")]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ContactpersoonEmailadres { get; set; } = default!;

		/// <summary>
		/// De naam van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string ContactpersoonNaam { get; set; } = default!;

		/// <summary>
		/// Het telefoonnummer van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonTelefoonnummer")]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string ContactpersoonTelefoonnummer { get; set; } = default!;

		/// <summary>
		/// De aanmaakdatum en -tijd van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("creatieDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string CreatieDatumTijd { get; set; } = default!;

		/// <summary>
		/// De datum en -tijd waarop de samenwerking verwijderd zal gaan worden.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("eindDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string EindDatumTijd { get; set; } = default!;

		/// <summary>
		/// Globale locatie van het verzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("globaleLocatie")]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string GlobaleLocatie { get; set; } = default!;

		/// <summary>
		/// Het kenmerk van een extern systeem.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("kenmerkSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string KenmerkSysteem { get; set; } = default!;

		/// <summary>
		/// De datum en tijd van de laatste aanpassing in de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("laatstAangepastDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string LaatstAangepastDatumTijd { get; set; } = default!;

		/// <summary>
		/// De organisatieId van de ketenpartner die de laatste aanpassing heeft gemaakt in de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("laatstAangepastDoor")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{20}")]
		public string LaatstAangepastDoor { get; set; } = default!;

		/// <summary>
		/// De naam van de ketenpartner die de laatste aanpassing heeft gemaakt in de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("laatstAangepastDoorNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string LaatstAangepastDoorNaam { get; set; } = default!;

		/// <summary>
		/// Het nummer van de samenwerking binnen de ketenpartner van de initiator.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("nummerBinnenSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string NummerBinnenSysteem { get; set; } = default!;

		/// <summary>
		/// Het nummer van het OLO-verzoek. Kan niet worden gebruikt i.c.m. DSO-verzoeknummer. Als het ingevuld is, moet bronVerzoek OLO zijn of leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("oloVerzoeknummer")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"(?=^\d{7}$)\d*[1-9]")]
		public string OloVerzoeknummer { get; set; } = default!;

		/// <summary>
		/// Het doel van de samenwerking, de default waarde is 'Behandelen'.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkDoel")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public SamenwerkingSamenwerkDoel SamenwerkDoel { get; set; } = default!;

		/// <summary>
		/// De vorm van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkVorm")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public SamenwerkingSamenwerkVorm SamenwerkVorm { get; set; } = default!;

		/// <summary>
		/// Een door het systeem gegenereerd unieke identificatie van de samenwerking.
		/// <br/>Dit ID wordt gebruikt bij het doen van mutaties op een samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkingId")]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 5)]
		public string SamenwerkingId { get; set; } = default!;

		/// <summary>
		/// De status van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("status")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public SamenwerkingStatus Status { get; set; } = default!;

		/// <summary>
		/// De taal van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("taal")]
		[System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 1)]
		public string Taal { get; set; } = default!;

		/// <summary>
		/// De naam van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("titel")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string Titel { get; set; } = default!;

		/// <summary>
		/// Het type van het verzoek. Bij een DSO-verzoek is de waarde leeg of één van de volgende waarden:
		/// <br/>* 'Aanvraag vergunning' (de default)
		/// <br/>* 'Melding'
		/// <br/>* 'Informatie'
		/// <br/>* 'Informatie ongewoon voorval'
		/// <br/>* 'Aanvraag maatwerkvoorschrift'
		/// <br/>* 'Melding gelijkwaardige maatregel'
		/// <br/>* 'Aanvraag toestemming gelijkwaardige maatregel'
		/// <br/>
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("typeVerzoek")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string TypeVerzoek { get; set; } = default!;

		/// <summary>
		/// Verzoeknummer van de samenwerking. Kan niet worden gebruikt i.c.m. OLO-verzoeknummer. Als het ingevuld is, moet bronVerzoek DSO_LV zijn of leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("verzoeknummer")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{13}")]
		public string Verzoeknummer { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record SamenwerkingenPagedModel
	{

		[System.Text.Json.Serialization.JsonPropertyName("_embedded")]
		public _embedded7 _embedded { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("_links")]
		public Links _links { get; set; } = default!;

		[System.Text.Json.Serialization.JsonPropertyName("page")]
		public PageMetadata Page { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// De nieuwe gegevens van het te wijzigen actieverzoek.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record UpdateActieverzoek
	{
		/// <summary>
		/// De omschrijving van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("bericht")]
		[System.ComponentModel.DataAnnotations.StringLength(6144)]
		public string Bericht { get; set; } = default!;

		/// <summary>
		/// De melding bij gereedmelden / intrekken actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("melding")]
		[System.ComponentModel.DataAnnotations.StringLength(6144)]
		public string Melding { get; set; } = default!;

		/// <summary>
		/// De productId van het product in de PDC waar actieverzoek betrekking op heeft.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("productId")]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string ProductId { get; set; } = default!;

		/// <summary>
		/// De gewenste status van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("status")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public UpdateActieverzoekStatus Status { get; set; } = default!;

		/// <summary>
		/// De titel van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("titel")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string Titel { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record UpdateActieverzoekDocumenten
	{
		/// <summary>
		/// De volledige lijst van identifiers van relevante documenten in het samenwerkdossier die relevant zijn voor het te wijzigen actieverzoek. Documenten die voorheen gekoppeld waren aan het actieverzoek, maar niet in de opgegeven lijst staan, worden hiermee ontkoppeld van het actieverzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documenten")]
		public System.Collections.Generic.ICollection<System.Guid> Documenten { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Nieuw toe te kennen privilege voor betreffende organisatie.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record UpdateAutorisatie
	{
		/// <summary>
		/// * VT - Volledige toegang, toegang tot alle documenten in het samenwerkdossier. 
		/// <br/>* BT - Beperkte toegang, toegang tot documenten in het samenwerkdossier die geen persoonsgegevens en/of bedrijfsgevoelige gegevens bevatten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("privilege")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public UpdateAutorisatiePrivilege Privilege { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Het aanpasbaar deel van de metadata van een document
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record UpdateDocument
	{
		/// <summary>
		/// De bestandsnaam van het document.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("bestandsNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string BestandsNaam { get; set; } = default!;

		/// <summary>
		/// Een tekstuele beschrijving van het document.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documentOmschrijving")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string DocumentOmschrijving { get; set; } = default!;

		/// <summary>
		/// Het kenmerk van een extern systeem.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("kenmerkSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string KenmerkSysteem { get; set; } = default!;

		/// <summary>
		/// Het identificerend nummer binnen een extern systeem.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("nummerBinnenSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string NummerBinnenSysteem { get; set; } = default!;

		/// <summary>
		/// De vertrouwelijkheidsaanduiding van het document.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("vertrouwelijkheidsAanduiding")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public UpdateDocumentVertrouwelijkheidsAanduiding VertrouwelijkheidsAanduiding { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// De toegangsrechten voor het document (toegestane waarden zijn: N (=geen rechten),R (=Leesrechten),RUD (=Lees- en wijzigrechten)).
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record UpdateDocumentAutorisatie
	{

		[System.Text.Json.Serialization.JsonPropertyName("rechten")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public UpdateDocumentAutorisatieRechten Rechten { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Nieuwe details van de samenwerking.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record UpdateSamenwerking
	{
		/// <summary>
		/// Beschrijving van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("beschrijving")]
		[System.ComponentModel.DataAnnotations.StringLength(6144)]
		public string Beschrijving { get; set; } = default!;

		/// <summary>
		/// Bron van het verzoek: DSO_LV of OLO. Als bij het aanmaken van een samenwerking op basis van een verzoek 1 verzoeknummer is ingevuld, kan de bron daaruit worden afgeleid en mag bronVerzoek leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("bronVerzoek")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public UpdateSamenwerkingBronVerzoek BronVerzoek { get; set; } = default!;

		/// <summary>
		/// Het e-mailadres van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonEmailadres")]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ContactpersoonEmailadres { get; set; } = default!;

		/// <summary>
		/// De naam van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string ContactpersoonNaam { get; set; } = default!;

		/// <summary>
		/// Het telefoonnummer van de contactpersoon van de ketenpartner die initiator is van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("contactpersoonTelefoonnummer")]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string ContactpersoonTelefoonnummer { get; set; } = default!;

		/// <summary>
		/// De datum en -tijd waarop de samenwerking verwijderd zal gaan worden. De PATCH mag, voor dit veld, alleen worden uitgevoerd tussen een maand voorafgaand aan de oude einddatum en de oude einddatum zelf. De nieuwe waarde voor eindDatumTijd mag maximaal 365 dagen in de toekomst liggen, gemeten vanaf de aanroep.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("eindDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string EindDatumTijd { get; set; } = default!;

		/// <summary>
		/// Globale locatie van het verzoek.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("globaleLocatie")]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string GlobaleLocatie { get; set; } = default!;

		/// <summary>
		/// Het kenmerk van een extern systeem.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("kenmerkSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string KenmerkSysteem { get; set; } = default!;

		/// <summary>
		/// Het nummer van de samenwerking binnen de ketenpartner van de initiator.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("nummerBinnenSysteem")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string NummerBinnenSysteem { get; set; } = default!;

		/// <summary>
		/// Het nummer van het OLO-verzoek. Kan niet worden gebruikt i.c.m. DSO-verzoeknummer. Als het ingevuld is, moet bronVerzoek OLO zijn of leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("oloVerzoeknummer")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"(?=^\d{7}$)\d*[1-9]")]
		public string OloVerzoeknummer { get; set; } = default!;

		/// <summary>
		/// Het doel van de samenwerking, de default waarde is 'Behandelen'.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkDoel")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public UpdateSamenwerkingSamenwerkDoel SamenwerkDoel { get; set; } = default!;

		/// <summary>
		/// De status van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("status")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public UpdateSamenwerkingStatus Status { get; set; } = default!;

		/// <summary>
		/// De naam van de samenwerking.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("titel")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string Titel { get; set; } = default!;

		/// <summary>
		/// Het type van het verzoek. Bij een DSO-verzoek is de waarde leeg of één van de volgende waarden:
		/// <br/>* 'Aanvraag vergunning' (de default)
		/// <br/>* 'Melding'
		/// <br/>* 'Informatie'
		/// <br/>* 'Informatie ongewoon voorval'
		/// <br/>* 'Aanvraag maatwerkvoorschrift'
		/// <br/>* 'Melding gelijkwaardige maatregel'
		/// <br/>* 'Aanvraag toestemming gelijkwaardige maatregel'
		/// <br/>
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("typeVerzoek")]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string TypeVerzoek { get; set; } = default!;

		/// <summary>
		/// Verzoeknummer van de samenwerking. Kan niet worden gebruikt i.c.m. OLO-verzoeknummer. Als het ingevuld is, moet bronVerzoek DSO_LV zijn of leeg worden gelaten.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("verzoeknummer")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"\d{13}")]
		public string Verzoeknummer { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Health-informatie over de API
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record AppHealth
	{
		/// <summary>
		/// Geeft aan of de API up is
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("status")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public AppHealthStatus Status { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	/// <summary>
	/// Metadata over de API
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record AppInfo
	{
		/// <summary>
		/// De API-versie
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("apiVersion")]
		public string ApiVersion { get; set; } = default!;

		/// <summary>
		/// De versie van de build
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("buildVersion")]
		public string BuildVersion { get; set; } = default!;

		/// <summary>
		/// Een korte omschrijving van de API
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("description")]
		public string Description { get; set; } = default!;

		/// <summary>
		/// De naam van de API
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("name")]
		public string Name { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum Status
	{

		[System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
		OPEN = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"GEREED")]
		GEREED = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"INGETROKKEN")]
		INGETROKKEN = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum Soort
	{

		[System.Runtime.Serialization.EnumMember(Value = @"INKOMEND")]
		INKOMEND = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"UITGAAND")]
		UITGAAND = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum VertrouwelijkheidsAanduiding
	{

		[System.Runtime.Serialization.EnumMember(Value = @"SV")]
		SV = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"RV")]
		RV = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum ActieverzoekStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
		OPEN = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"GEREED")]
		GEREED = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"INGETROKKEN")]
		INGETROKKEN = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record _embedded
	{

		[System.Text.Json.Serialization.JsonPropertyName("actieverzoeken")]
		public System.Collections.Generic.ICollection<Actieverzoek> Actieverzoeken { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum CreateKetenpartnerPrivilege
	{

		[System.Runtime.Serialization.EnumMember(Value = @"BT")]
		BT = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"VT")]
		VT = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum CreateSamenwerkingBronVerzoek
	{

		[System.Runtime.Serialization.EnumMember(Value = @"DSO_LV")]
		DSO_LV = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"OLO")]
		OLO = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum CreateSamenwerkingSamenwerkDoel
	{

		[System.Runtime.Serialization.EnumMember(Value = @"VOOROVERLEG")]
		VOOROVERLEG = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"BEHANDELEN")]
		BEHANDELEN = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum DeelnemerPrivilege
	{

		[System.Runtime.Serialization.EnumMember(Value = @"VT")]
		VT = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"BT")]
		BT = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"INITIATOR")]
		INITIATOR = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record _embedded2
	{

		[System.Text.Json.Serialization.JsonPropertyName("deelnemers")]
		public System.Collections.Generic.ICollection<Deelnemer> Deelnemers { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum DocumentVertrouwelijkheidsAanduiding
	{

		[System.Runtime.Serialization.EnumMember(Value = @"SV")]
		SV = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"RV")]
		RV = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum DocumentAutorisatieRechten
	{

		[System.Runtime.Serialization.EnumMember(Value = @"N")]
		N = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"R")]
		R = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"RUD")]
		RUD = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record _embedded3
	{

		[System.Text.Json.Serialization.JsonPropertyName("autorisaties")]
		public System.Collections.Generic.ICollection<DocumentAutorisatie> Autorisaties { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record _embedded4
	{

		[System.Text.Json.Serialization.JsonPropertyName("documenten")]
		public System.Collections.Generic.ICollection<Document> Documenten { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum NotificatieType
	{

		[System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT_TOEGEVOEGD")]
		DOCUMENT_TOEGEVOEGD = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT_GEWIJZIGD")]
		DOCUMENT_GEWIJZIGD = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT_VERWIJDERD")]
		DOCUMENT_VERWIJDERD = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"RECHTEN_OP_DOCUMENT_AANGEPAST")]
		RECHTEN_OP_DOCUMENT_AANGEPAST = 3,

		[System.Runtime.Serialization.EnumMember(Value = @"UITNODIGING_KETENPARTNER")]
		UITNODIGING_KETENPARTNER = 4,

		[System.Runtime.Serialization.EnumMember(Value = @"PRIVILEGE_VOOR_KETENPARTNER_AANGEPAST")]
		PRIVILEGE_VOOR_KETENPARTNER_AANGEPAST = 5,

		[System.Runtime.Serialization.EnumMember(Value = @"KETENPARTNER_VERWIJDERD")]
		KETENPARTNER_VERWIJDERD = 6,

		[System.Runtime.Serialization.EnumMember(Value = @"ACTIEVERZOEK_ONTVANGEN")]
		ACTIEVERZOEK_ONTVANGEN = 7,

		[System.Runtime.Serialization.EnumMember(Value = @"ACTIEVERZOEK_GEREED_GEMELD")]
		ACTIEVERZOEK_GEREED_GEMELD = 8,

		[System.Runtime.Serialization.EnumMember(Value = @"ACTIEVERZOEK_INGETROKKEN")]
		ACTIEVERZOEK_INGETROKKEN = 9,

		[System.Runtime.Serialization.EnumMember(Value = @"SAMENWERKING_GEWIJZIGD")]
		SAMENWERKING_GEWIJZIGD = 10,

		[System.Runtime.Serialization.EnumMember(Value = @"SAMENWERKING_GESTOPT")]
		SAMENWERKING_GESTOPT = 11,

		[System.Runtime.Serialization.EnumMember(Value = @"EINDE_BEWAARTERMIJN_NADERT")]
		EINDE_BEWAARTERMIJN_NADERT = 12,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record Properties
	{
		/// <summary>
		/// De identificatie van een actieverzoek. Dit veld is van toepassing voor notificaties van het type:
		/// <br/>* ACTIEVERZOEK_ONTVANGEN
		/// <br/>* ACTIEVERZOEK_GEREED_GEMELD
		/// <br/>* ACTIEVERZOEK_INGETROKKEN
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("actieverzoekId")]
		public System.Guid ActieverzoekId { get; set; } = default!;

		/// <summary>
		/// De titel van een actieverzoek. Dit veld is van toepassing voor notificaties van het type:
		/// <br/>* ACTIEVERZOEK_ONTVANGEN
		/// <br/>* ACTIEVERZOEK_GEREED_GEMELD
		/// <br/>* ACTIEVERZOEK_INGETROKKEN
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("actieverzoekTitel")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string ActieverzoekTitel { get; set; } = default!;

		/// <summary>
		/// De identificatie van een document. Dit veld is van toepassing voor notificaties van het type:
		/// <br/>* DOCUMENT_TOEGEVOEGD
		/// <br/>* DOCUMENT_GEWIJZIGD
		/// <br/>* DOCUMENT_VERWIJDERD
		/// <br/>* RECHTEN_OP_DOCUMENT_AANGEPAST
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documentId")]
		public System.Guid DocumentId { get; set; } = default!;

		/// <summary>
		/// De bestandsnaam van een document. Dit veld is van toepassing voor notificaties van het type:
		/// <br/>* DOCUMENT_TOEGEVOEGD
		/// <br/>* DOCUMENT_GEWIJZIGD
		/// <br/>* DOCUMENT_VERWIJDERD
		/// <br/>* RECHTEN_OP_DOCUMENT_AANGEPAST
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("documentNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
		public string DocumentNaam { get; set; } = default!;

		/// <summary>
		/// Het nieuw verkregen privilege binnen een samenwerking. Dit veld is van toepassing voor notificaties van het type:
		/// <br/>* UITNODIGING_KETENPARTNER
		/// <br/>* RECHTEN_OP_SAMENWERKING_AANGEPAST
		/// <br/>
		/// <br/>De verschillende waarden hebben de volgende betekenis:
		/// <br/>* VT - Volledige toegang, toegang tot alle documenten in het samenwerkdossier. 
		/// <br/>* BT - Beperkte toegang, toegang tot documenten in het samenwerkdossier die geen persoonsgegevens en/of bedrijfsgevoelige gegevens bevatten.
		/// <br/> * INITIATOR - Volledige toegang en rechten om het dossier en alle documenten te wijzigen of te verwijderen.
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("privilege")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public PropertiesPrivilege Privilege { get; set; } = default!;

		/// <summary>
		/// De nieuw verkregen rechten voor een document. Dit veld is van toepassing voor notificaties van het type RECHTEN_OP_DOCUMENT_AANGEPAST.
		/// <br/>De verschillende waarden hebben de volgende betekenis:
		/// <br/>* N - Geen rechten
		/// <br/>* R - Leesrechten
		/// <br/>* RUD - Lees- en wijzigrechten
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("rechten")]
		[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
		public PropertiesRechten Rechten { get; set; } = default!;

		/// <summary>
		/// De titel van een samenwerking. Dit veld is van toepassing voor notificaties van het type:
		/// <br/>* UITNODIGING_KETENPARTNER
		/// <br/>* RECHTEN_OP_SAMENWERKING_AANGEPAST
		/// <br/>* RECHTEN_OP_SAMENWERKING_VERWIJDERD
		/// <br/>* SAMENWERKING_GEWIJZIGD
		/// <br/>* SAMENWERKING_GESTOPT
		/// <br/>* EINDE_BEWAARTERMIJN_NADERT
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkingNaam")]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
		public string SamenwerkingNaam { get; set; } = default!;

		/// <summary>
		/// Het (Nederlandse) tijdstip waarop de samenwerking verloopt en verwijderd zal worden. Dit veld is van toepassing voor notificaties van het type:
		/// <br/>* EINDE_BEWAARTERMIJN_NADERT
		/// </summary>

		[System.Text.Json.Serialization.JsonPropertyName("verwijderDatumTijd")]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}$")]
		public string VerwijderDatumTijd { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record _embedded5
	{

		[System.Text.Json.Serialization.JsonPropertyName("notificaties")]
		public System.Collections.Generic.ICollection<Notificatie> Notificaties { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record _embedded6
	{

		[System.Text.Json.Serialization.JsonPropertyName("organisaties")]
		public System.Collections.Generic.ICollection<Organisatie> Organisaties { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum SamenwerkingBronVerzoek
	{

		[System.Runtime.Serialization.EnumMember(Value = @"DSO_LV")]
		DSO_LV = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"OLO")]
		OLO = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum SamenwerkingSamenwerkDoel
	{

		[System.Runtime.Serialization.EnumMember(Value = @"VOOROVERLEG")]
		VOOROVERLEG = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"BEHANDELEN")]
		BEHANDELEN = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum SamenwerkingSamenwerkVorm
	{

		[System.Runtime.Serialization.EnumMember(Value = @"SAMENWERKEN_AAN_BEHANDELEN")]
		SAMENWERKEN_AAN_BEHANDELEN = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"SAMENWERKEN_AAN_PLANNEN")]
		SAMENWERKEN_AAN_PLANNEN = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum SamenwerkingStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"GESLOTEN")]
		GESLOTEN = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"OPEN")]
		OPEN = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial record _embedded7
	{

		[System.Text.Json.Serialization.JsonPropertyName("samenwerkingen")]
		public System.Collections.Generic.ICollection<Samenwerking> Samenwerkingen { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[System.Text.Json.Serialization.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum UpdateActieverzoekStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"GEREED")]
		GEREED = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"INGETROKKEN")]
		INGETROKKEN = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum UpdateAutorisatiePrivilege
	{

		[System.Runtime.Serialization.EnumMember(Value = @"VT")]
		VT = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"BT")]
		BT = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum UpdateDocumentVertrouwelijkheidsAanduiding
	{

		[System.Runtime.Serialization.EnumMember(Value = @"SV")]
		SV = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"RV")]
		RV = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum UpdateDocumentAutorisatieRechten
	{

		[System.Runtime.Serialization.EnumMember(Value = @"N")]
		N = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"R")]
		R = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"RUD")]
		RUD = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum UpdateSamenwerkingBronVerzoek
	{

		[System.Runtime.Serialization.EnumMember(Value = @"DSO_LV")]
		DSO_LV = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"OLO")]
		OLO = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum UpdateSamenwerkingSamenwerkDoel
	{

		[System.Runtime.Serialization.EnumMember(Value = @"VOOROVERLEG")]
		VOOROVERLEG = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"BEHANDELEN")]
		BEHANDELEN = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum UpdateSamenwerkingStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"GESLOTEN")]
		GESLOTEN = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum AppHealthStatus
	{

		[System.Runtime.Serialization.EnumMember(Value = @"UP")]
		UP = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"DOWN")]
		DOWN = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum PropertiesPrivilege
	{

		[System.Runtime.Serialization.EnumMember(Value = @"VT")]
		VT = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"BT")]
		BT = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"INITIATOR")]
		INITIATOR = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public enum PropertiesRechten
	{

		[System.Runtime.Serialization.EnumMember(Value = @"N")]
		N = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"R")]
		R = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"RUD")]
		RUD = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class FileParameter
	{
		public FileParameter(System.IO.Stream data)
				: this(data, null, null)
		{
		}

		public FileParameter(System.IO.Stream data, string? fileName)
				: this(data, fileName, null)
		{
		}

		public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
		{
			Data = data;
			FileName = fileName;
			ContentType = contentType;
		}

		public System.IO.Stream Data { get; private set; }

		public string? FileName { get; private set; }

		public string? ContentType { get; private set; }
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class FileResponse : System.IDisposable
	{
		private System.IDisposable? _client;
		private System.IDisposable? _response;

		public int StatusCode { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public System.IO.Stream Stream { get; private set; }

		public bool IsPartial
		{
			get { return StatusCode == 206; }
		}

		public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
		{
			StatusCode = statusCode;
			Headers = headers;
			Stream = stream;
			_client = client;
			_response = response;
		}

		public void Dispose()
		{
			Stream.Dispose();
			if (_response != null)
				_response.Dispose();
			if (_client != null)
				_client.Dispose();
		}
	}


	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ApiException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string? Response { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
				: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ApiException<TResult> : ApiException
	{
		public TResult Result { get; private set; }

		public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
				: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625